% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogenerated.r, R/checkAtomicVector.r
\name{assertAtomicVector}
\alias{assertAtomicVector}
\alias{assert_atomic_vector}
\alias{checkAtomicVector}
\alias{expect_atomic_vector}
\alias{testAtomicVector}
\alias{test_atomic_vector}
\title{Check that an argument is an atomic vector}
\usage{
assertAtomicVector(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL,
  add = NULL, .var.name)

assert_atomic_vector(x, any.missing = TRUE, all.missing = TRUE,
  len = NULL, min.len = NULL, max.len = NULL, unique = FALSE,
  names = NULL, add = NULL, .var.name)

testAtomicVector(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL)

test_atomic_vector(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL)

expect_atomic_vector(x, any.missing = TRUE, all.missing = TRUE,
  len = NULL, min.len = NULL, max.len = NULL, unique = FALSE,
  names = NULL, info = NULL, label = NULL)

checkAtomicVector(x, any.missing = TRUE, all.missing = TRUE, len = NULL,
  min.len = NULL, max.len = NULL, unique = FALSE, names = NULL)
}
\arguments{
\item{x}{[any]\cr
Object to check.}

\item{any.missing}{[\code{logical(1)}]\cr
Are vectors with missing values allowed? Default is \code{TRUE}.}

\item{all.missing}{[\code{logical(1)}]\cr
Are vectors with only missing values allowed? Default is \code{TRUE}.}

\item{len}{[\code{integer(1)}]\cr
Exact expected length of \code{x}.}

\item{min.len}{[\code{integer(1)}]\cr
Minimal length of \code{x}.}

\item{max.len}{[\code{integer(1)}]\cr
Maximal length of \code{x}.}

\item{unique}{[\code{logical(1)}]\cr
Must all values be unique? Default is \code{FALSE}.}

\item{names}{[\code{character(1)}]\cr
Check for names. See \code{\link{checkNamed}} for possible values.
Default is \dQuote{any} which performs no check at all.}

\item{add}{[\code{AssertCollection}]\cr
Collection to store assertions. See \code{\link{AssertCollection}}.}

\item{.var.name}{[character(1)]\cr
Name for \code{x}. Defaults to a heuristic to determine
the name using \code{\link[base]{deparse}} and \code{\link[base]{substitute}}.}

\item{info}{[character(1)]\cr
Extra information to be included in the message for the testthat reporter.
See \code{\link[testthat]{expect_that}}.}

\item{label}{[character(1)]\cr
Same as \code{.var.name}, but passed down to \code{\link[testthat]{expect_that}}.}
}
\value{
Depending on the function prefix:
 If the check is successful, all functions return \code{TRUE}. If the check
 is not successful, \code{assertAtomicVector}/\code{assert_atomic_vector}
 throws an error message, \code{testAtomicVector}/\code{test_atomic_vector}
 returns \code{FALSE},
 and \code{checkAtomicVector} returns a string with the error message.
 The function \code{expect_atomic_vector} will return an
 \code{\link[testthat]{expectation}}.
}
\description{
An atomic vector is defined slightly different from specifications in
\code{\link[base]{is.atomic}} and \code{\link[base]{is.vector}}:
An atomic vector is either \code{logical}, \code{integer}, \code{numeric},
\code{complex}, \code{character} or \code{raw} and can have any attributes.
I.e., a \code{factor} is an atomic vector, but \code{NULL} is not.
In short, this is equivalent to \code{is.atomic(x) && !is.null(x)}.
}
\examples{
testAtomicVector(letters, min.len = 1L, any.missing = FALSE)
}
\seealso{
Other atomicvector: \code{\link{assertAtomic}},
  \code{\link{assertVector}}

Other basetypes: \code{\link{assertArray}},
  \code{\link{assertAtomic}},
  \code{\link{assertCharacter}},
  \code{\link{assertComplex}},
  \code{\link{assertDataFrame}},
  \code{\link{assertDataTable}},
  \code{\link{assertEnvironment}},
  \code{\link{assertFactor}}, \code{\link{assertFunction}},
  \code{\link{assertIntegerish}},
  \code{\link{assertInteger}}, \code{\link{assertList}},
  \code{\link{assertLogical}}, \code{\link{assertMatrix}},
  \code{\link{assertNumeric}}, \code{\link{assertVector}}
}

