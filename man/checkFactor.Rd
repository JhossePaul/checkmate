% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogenerated.r, R/checkFactor.r
\name{assertFactor}
\alias{assertFactor}
\alias{assert_factor}
\alias{checkFactor}
\alias{expect_factor}
\alias{testFactor}
\alias{test_factor}
\title{Check if an argument is a factor}
\usage{
assertFactor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL, min.len = NULL,
  max.len = NULL, n.levels = NULL, min.levels = NULL, max.levels = NULL,
  unique = FALSE, names = NULL, add = NULL, .var.name)

assert_factor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL, min.len = NULL,
  max.len = NULL, n.levels = NULL, min.levels = NULL, max.levels = NULL,
  unique = FALSE, names = NULL, add = NULL, .var.name)

testFactor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL, min.len = NULL,
  max.len = NULL, n.levels = NULL, min.levels = NULL, max.levels = NULL,
  unique = FALSE, names = NULL)

test_factor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL, min.len = NULL,
  max.len = NULL, n.levels = NULL, min.levels = NULL, max.levels = NULL,
  unique = FALSE, names = NULL)

expect_factor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL, min.len = NULL,
  max.len = NULL, n.levels = NULL, min.levels = NULL, max.levels = NULL,
  unique = FALSE, names = NULL, info = NULL, label = NULL)

checkFactor(x, levels = NULL, ordered = NA, empty.levels.ok = TRUE,
  any.missing = TRUE, all.missing = TRUE, len = NULL, min.len = NULL,
  max.len = NULL, n.levels = NULL, min.levels = NULL, max.levels = NULL,
  unique = FALSE, names = NULL)
}
\arguments{
\item{x}{[any]\cr
Object to check.}

\item{levels}{[\code{character}]\cr
Vector of allowed factor levels.}

\item{ordered}{[\code{logical(1)}]\cr
Check for an ordered factor? If \code{FALSE} or \code{TRUE}, checks explicitly
for an unordered or ordered factor, respectively.
Default is \code{NA} which does not perform a check.}

\item{empty.levels.ok}{[\code{logical(1)}]\cr
Are empty levels allowed?
Default is \code{TRUE}.}

\item{any.missing}{[\code{logical(1)}]\cr
Are vectors with missing values allowed? Default is \code{TRUE}.}

\item{all.missing}{[\code{logical(1)}]\cr
Are vectors with only missing values allowed? Default is \code{TRUE}.}

\item{len}{[\code{integer(1)}]\cr
Exact expected length of \code{x}.}

\item{min.len}{[\code{integer(1)}]\cr
Minimal length of \code{x}.}

\item{max.len}{[\code{integer(1)}]\cr
Maximal length of \code{x}.}

\item{n.levels}{[\code{integer(1)}]\cr
Exact number of factor levels.
Default is \code{NULL} (no check).}

\item{min.levels}{[\code{integer(1)}]\cr
Minimum number of factor levels.
Default is \code{NULL} (no check).}

\item{max.levels}{[\code{integer(1)}]\cr
Maximum number of factor levels.
Default is \code{NULL} (no check).}

\item{unique}{[\code{logical(1)}]\cr
Must all values be unique? Default is \code{FALSE}.}

\item{names}{[\code{character(1)}]\cr
Check for names. See \code{\link{checkNamed}} for possible values.
Default is \dQuote{any} which performs no check at all.
Note that you can use \code{\link{checkSubset}} to check for a specific set of names.}

\item{add}{[\code{AssertCollection}]\cr
Collection to store assertions. See \code{\link{AssertCollection}}.}

\item{.var.name}{[character(1)]\cr
Name for \code{x}. Defaults to a heuristic to determine
the name using \code{\link[base]{deparse}} and \code{\link[base]{substitute}}.}

\item{info}{[character(1)]\cr
Extra information to be included in the message for the testthat reporter.
See \code{\link[testthat]{expect_that}}.}

\item{label}{[character(1)]\cr
Same as \code{.var.name}, but passed down to \code{\link[testthat]{expect_that}}.}
}
\value{
Depending on the function prefix:
 If the check is successful, all functions return \code{TRUE}. If the check
 is not successful, \code{assertFactor}/\code{assert_factor}
 throws an error message, \code{testFactor}/\code{test_factor}
 returns \code{FALSE},
 and \code{checkFactor} returns a string with the error message.
 The function \code{expect_factor} will return an
 \code{\link[testthat]{expectation}}.
}
\description{
Check if an argument is a factor
}
\examples{
x = factor("a", levels = c("a", "b"))
testFactor(x)
testFactor(x, empty.levels.ok = FALSE)
}
\seealso{
Other basetypes: \code{\link{assertArray}},
  \code{\link{assertAtomicVector}},
  \code{\link{assertAtomic}},
  \code{\link{assertCharacter}},
  \code{\link{assertComplex}},
  \code{\link{assertDataFrame}},
  \code{\link{assertDataTable}},
  \code{\link{assertEnvironment}},
  \code{\link{assertFunction}},
  \code{\link{assertIntegerish}},
  \code{\link{assertInteger}}, \code{\link{assertList}},
  \code{\link{assertLogical}}, \code{\link{assertMatrix}},
  \code{\link{assertNumeric}}, \code{\link{assertVector}}
}

